def bytes_from_hex(hex_string, size=2):
    """
    Creates a generator that reads the hexadecimally represented bytes from a string.

    E.g. bytes_from_hex('0a15') will return 10, 21

    If the length of the string is not a multiple of size, the remaining characters will be ignored

    :param hex_string: a string (case insensitive) representing a sequence of bytes hexadecimally
    :param size: The amount of characters used to represent each number (typically 2 to cover the range of a byte)
    :return: a generator the yields the bytes represented in the string
    """
    for s in substrings(hex_string, size):
        yield int(s, 16)


def bytes_from_binary(binary_string, size=8):
    """
    Creates a generator that reads the bytes represented in a binary string.

    E.g. bytes_from_binary('0000101000010101') will return 10, 21

    If the length of the string is not a multiple of size, the remaining characters will be ignored

    :param binary_string: a string (case insensitive) representing a sequence of bytes in binary
    :param size: The amount of characters used to represent each number (typically 8 to cover the range of a byte)
    :return: a generator the yields the bytes represented in the string
    """
    for s in substrings(binary_string, size):
        yield int(s, 2)


def characters_from_bytestream(bytestream):
    """
    Will create a generator that generates ascii characters from the numbers generated by the passed generator

    E.g. characters_from_bytestream(bytes_from_hex('20')) will yield a space character

    :param bytestream: a generator that returns numbers
    :return: a generator that generates ascii characters from the numbers generated by the passed generator
    """
    for b in bytestream:
        yield chr(b)


def group(stream, group_size, yield_leftover=True):
    """
    Converts a stream of elements into a stream of groups of elements
    :param stream: a generator
    :param group_size: The desired size of the returned groups
    :param yield_leftover: Whether or not to return a group of smaller than group_size if there are leftover elements
    :return:
    """
    l = []
    for s in stream:
        l.append(s)
        if len(l) == group_size:
            yield tuple(l)
            l = []
    if l and yield_leftover:
        yield tuple(l)


def ungroup(stream):
    """
    Converts a stream of streams into a stream containing the elements of those streams
    :param stream: a generator that returns other generators
    :return: a generator that will returns the elements of the returned generators
    """
    for s in stream:
        for t in s:
            yield t


def substrings(string, size):
    """
    Returns the substrings of a string of a given size.
    If the length of the string is not a multiple of size, a smaller string will be returned at the end.
    :param string: a string
    :param size: The desired size of the substrings
    :return: a generator returning the substrings of desired size
    """
    for i in range(0, len(string), size):
        yield string[i:i + size]


def offset(stream, index):
    """
    Ignores the first few elements of a stream
    :param stream: a generator
    :param index: The amount of elements to skip
    :return: a generator that starts after the given amount of elements have been ignored
    """
    for s in stream:
        if index == 0:
            yield s
        else:
            index -= 1


def skip(stream, skip_value):
    """
    a generator that returns the first and then every nth element of the passed stream.

    E.g. skip('0123456789', 3) will return a generator that returns 0, 3, 6, 9
    :param stream: a generator
    :param skip_value: 1 out of skip_value elements will be returned
    :return: a generator that returns every nth element of the passed stream
    """
    index = 0
    for s in stream:
        if index % skip_value == 0:
            yield s
        index += 1

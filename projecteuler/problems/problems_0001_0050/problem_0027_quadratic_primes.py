from itertools import count

from util.primes import is_prime, primes_until


def _quadratic_primes(a: int, b: int) -> int:
    """ Returns the amount of consecutive primes generated by the quadratic function with these parameters """
    for n in count():
        if not is_prime(n * n + a * n + b):
            return n


def problem_0027(limit: 1000):
    max_a, max_b = 0, 0
    maximum = 0
    for a in range(-limit + 1, limit):
        for b in primes_until(limit):  # b has to be prime, so we don't need the full range(-1000, 1001)
            amount = _quadratic_primes(a, b)
            if amount > maximum:
                maximum = amount
                max_a, max_b = a, b

    return max_a * max_b


if __name__ == '__main__':
    LIMIT = 1000

    print(problem_0027(LIMIT))
    # Expected: -59231

# IDEA I could limit the candidates for a, based on the formula with n=1
